@import "tailwindcss";
@import "./docs/article.style.css";

html {
  /* scroll-behavior: smooth; */
}

body {
  /* background: var(--color-background); */
  /* color: var(--color-foreground); */
  font-family: var(--font-next-sans), Arial, Helvetica, sans-serif;
}

@layer utilities {
  * {
    border-color: var(--color-border);
  }
}

@theme {
  --color-background: #fff;
  --color-foreground: var(--color-neutral-700);
  --color-primary: var(--color-neutral-700);

  --color-muted: color-mix(in hsl, var(--color-foreground) 50%, var(--color-background));
  --color-border: color-mix(in hsl, var(--color-foreground) 20%, var(--color-background));
  --color-focus: color-mix(in oklab, var(--color-muted) 25%, transparent);

  --color-primary-hover: color-mix(in oklab, var(--color-background) 8%, var(--color-primary));

  --color-destructive: var(--color-red-600);
  --color-destructive-border: --alpha(var(--color-destructive) / 0.25);
  --color-destructive-focus: --alpha(var(--color-destructive) / 0.25);
  --color-destructive-hover: color-mix(in oklab, var(--color-background) 8%, var(--color-destructive));

  --font-sans: var(--font-next-sans);
  --font-mono: var(--font-next-mono);

  --spacing-2xs: 18rem;

  /* @keyframes kf1 {
    0% {
      transform: translateY(0);
    }
    100% {
      transform: translateY(-1px);
    }
  } */
   --spacing-customspacing: 200rem;
   --container-customcontainer: 2000rem;
   --breakpoint-mybreakpoint: 200rem;
  
} 

@layer utilities {
  :where(*){
    --color-muted: color-mix(in hsl, var(--color-foreground) 50%, var(--color-background));
    --color-border: color-mix(in hsl, var(--color-foreground) 20%, var(--color-background));
    --color-focus: color-mix(in oklab, var(--color-muted) 25%, transparent);
  }
}

/* @theme  {
  --color-bg: #123;
} */

@custom-variant aria-current-page (&[aria-current="page"]);
@custom-variant svg (& svg);

@utility input-base {
  --input-h-sm:                     calc(var(--spacing) * 8);
  --input-h:                        calc(var(--spacing) * 9);
  --input-h-lg:                     calc(var(--spacing) * 10);
  --input-h-xl:                     calc(var(--spacing) * 11);
  --input-px-sm:                    calc(var(--spacing) * 3);
  --input-px:                       calc(var(--spacing) * 3);
  --input-px-lg:                    calc(var(--spacing) * 4);
  --input-px-xl:                    calc(var(--spacing) * 4.5);
  --input-shadow-width:             4px;
  --input-shadow:                   inset 0 1px 3px -1px --alpha(var(--color-neutral-900)/0.2);
  --input-shadow-destructive-focus: 0 0 0 var(--input-shadow-width) var(--color-destructive-focus);
  --input-hover-outline:            --alpha(var(--color-primary)/0.25);
  --input-bg:                       --alpha(#fff/0.02);

  @apply 
    rounded-md
    text-sm
    border border-border/50 outline-none
    transition-[outline,border,box-shadow]
    shadow-[0_0_0_0_--alpha(var(--color-primary)/0.10),var(--input-shadow)];
  
  &:where(:hover),
  &:where(:focus),
  &:where(:focus-within) {
    @apply 
      border-(--input-hover-outline)
      shadow-[0_0_0_4px_--alpha(var(--color-primary)/0.10),var(--input-shadow)]
  }

  &:disabled {
    @apply bg-foreground/10
      pointer-events-none
      opacity-75;
  }
  &:where([aria-invalid="true"]), 
  &:where(:has([aria-invalid="true"])) {
    @apply 
      border-destructive/50
      hover:border-destructive/75
      shadow-[0_0_0_var(--input-shadow-width)_--alpha(var(--color-destructive-focus)/0.5),var(--input-shadow)];
    &:where(:hover){
      @apply
        border-destructive/75
        shadow-[0_0_0_var(--input-shadow-width)_var(--color-destructive-focus),var(--input-shadow)];
    }
  }
}
/* input-base-end */


@utility asdf2-*{
  &:before{
    content: --value('hello') --value('world');
    content: --modifier( --tracking-*, --blur-*, 'initial', 'hello');
  }
}

@utility card {
  --p: calc(var(--spacing) * 3);
  @apply p-(--p) outline outline-border/50 shadow-xs
}



/* ---- */

@utility asdf-* {
  content: --value( --tracking-*, --blur-*, 'initial', 'hello');
  content: --modifier( --tracking-*, --spacing-*, 'initial', 'hello');
  @apply bg-muted bg-[var(--color-destructive)] bg-[var(--hello)] bg-(--color-destructive-border)/50 [background:var(--color-destructive-hover)/50];
  @apply input-base;
}


@utility test2 {
  @apply bg-(--a);
}

@utility reset {
  all: revert;
  @apply asdf-2xl
}

@utility util1-* {
  @apply asdf-2xl;
}

@utility bg-darker-* {
  background-color: color-mix(in srgb, #000 calc(--value(number) * 10%), var(--bg));
}

@theme {
  --align-items-baseline: baseline;
  --align-items-center: center;
  --align-items-first-baseline: first-baseline;
  --align-items-end: flex-end;
  --align-items-start: flex-start;
  --align-items-last-baseline: last-baseline;
  --align-items-normal: normal;
  --align-items-safe: safe;
  --align-items-self-end: self-end;
  --align-items-self-start: self-start;
  --align-items-stretch: stretch;
  --align-items-unsafe: unsafe;
  --align-items-initial: initial;
  --align-items-inherit: inherit;
  --align-items-unset: unset;

  --justify-content-baseline: baseline;
  --justify-content-center: center;
  --justify-content-first-baseline: first-baseline;
  --justify-content-end: flex-end;
  --justify-content-start: flex-start;
  --justify-content-last-baseline: last-baseline;
  --justify-content-left: left;
  --justify-content-right: right;
  --justify-content-safe: safe;
  --justify-content-space-around: space-around;
  --justify-content-space-between: space-between;
  --justify-content-space-evenly: space-evenly;
  --justify-content-stretch: stretch;
  --justify-content-unsafe: unsafe;
  --justify-content-initial: initial;
  --justify-content-inherit: inherit;
  --justify-content-unset: unset;
}

@utility flexrow {
  display: flex;
  flex-direction: row;
}
@utility flexcol-* {
  display: flex;
  flex-direction: column;
  align-items: start;
  align-items: --modifier(--align-items-*);
  justify-content: --value(--justify-content-*);
  gap: calc(--value(number) * var(--spacing))
}

@utility flexcol {
  display: flex;
  flex-direction: column;
}
@utility flexrow-* {
  display: flex;
  flex-direction: row;
  align-items: start;
  align-items: --modifier(--align-items-*);
  justify-content: --value(--justify-content-*);
  gap: calc(--value(number) * var(--spacing))
}

/* ---- */

@utility view3droot {
  --rotateX: 0deg;
  --rotateZ: 0deg;
  --panX: 0px;
  --panY: 0px;
  /* --baseZoomOut: -300px;
  --elevation: 50px;
  --control-bg: var(--color-background);
  --control-border: #fff3 1px solid;
  --control-overflow: visible;
  --perspective: 1000px; 
  --rotate-transition: transform 0.5s ease-in-out;
  */
  
  perspective: var(--perspective);
  @apply w-screen h-screen overflow-auto *:overflow-auto *:*:overflow-auto *:*:overflow-auto min-h-0;
  
  &.override {
    * {
      overflow: visible !important;
      position: relative;
    }
  }

  > div {
    @apply transition-(--rotate-transition);
    transform-style: preserve-3d;
    /* transform: translateX(-50%) translateY(-50%) translateZ(-500px); */
    transform: translateX(calc(var(--panX))) translateY(calc(var(--panY)));
    
    > div {
      @apply w-screen h-screen rounded-2xl resize transition-(--rotate-transition);
      transform-style: preserve-3d;
      transform: rotateX(var(--rotateX)) rotateZ(var(--rotateZ));
      transform-origin: calc(50% + var(--panX) * -1) calc(50% + var(--panY) * -1);
      
      > div {
        @apply transition-[transform] duration-500;
        transform-style: preserve-3d;
        transform: translateZ(var(--baseZoomOut));
        & * {
          @apply transition-all duration-500 bg-background;
          outline: var(--control-border);
          transform-style: preserve-3d;
          transform: translateZ(var(--elevation));
        }
      }
      
    }

  }
}

@custom-variant debughl {
  &[data-hl="true"] {
    @slot;
  }
}

@utility design-tool-hover {
  @apply outline 
  outline-blue-400;
  & > :where(*) {
    @apply outline 
    outline-dashed
    outline-blue-400/50
  }
}

@utility design-tool-selected {
  @apply outline! outline-2! outline-solid!
  outline-blue-400!;
  & > :where(*) {
    @apply outline! 
    outline-dashed!
    outline-blue-400/50!
  }
}

*:has(> .design-tool-selected) {
  @apply outline! outline-1! outline-dashed!
  outline-blue-400/50!;
}